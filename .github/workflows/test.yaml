name: Test Nix Package Persistence

on:
  workflow_dispatch:
  push:
    branches: ["test-nix-persistence"]


jobs:
  install-packages:
    name: "Install Nix Packages (Write to Store)"
    runs-on: arc-runners
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup base directories
        run: |
          echo "=== Setting up base directories ==="
          
          # Create persistent storage directories outside /nix to avoid conflicts
          sudo mkdir -p /persistent-nix/lower-store
          sudo mkdir -p /persistent-nix/workdir
          
          # Set basic permissions
          sudo chown -R $(whoami) /persistent-nix
          
          echo "=== Base directories setup complete ==="

      - name: Prepare for Nix installation
        run: |
          echo "=== Preparing /nix directory for installation ==="
          
          # Install required dependencies first
          sudo apt-get update -q
          sudo apt-get install -y xz-utils curl util-linux
          
          # Check current state
          ls -la / | grep nix || echo "No /nix directory found"
          mount | grep /nix || echo "No /nix mounts found"
          
          # Stop any running Nix daemon
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl stop nix-daemon 2>/dev/null || true
            sudo systemctl disable nix-daemon 2>/dev/null || true
          else
            echo "Systemd not available, skipping daemon management"
          fi
          
          # Unmount specific ARC runner persistent mounts in correct order
          echo "=== Unmounting ARC runner persistent volumes ==="
          
          # Unmount overlay filesystem first
          sudo umount /nix/lower-store 2>/dev/null || echo "lower-store not mounted or already unmounted"
          
          # Unmount persistent volume mounts
          sudo umount /nix/workdir 2>/dev/null || echo "workdir not mounted or already unmounted"
          sudo umount /etc/nix/nix.conf 2>/dev/null || echo "nix.conf not mounted or already unmounted"
          
          # Force unmount any remaining /nix mounts
          sudo umount -f /nix/lower-store 2>/dev/null || true
          sudo umount -f /nix/workdir 2>/dev/null || true
          sudo umount -l /nix/lower-store 2>/dev/null || true
          sudo umount -l /nix/workdir 2>/dev/null || true
          
          # Remove mount points after unmounting
          sudo rm -rf /nix/lower-store 2>/dev/null || true
          sudo rm -rf /nix/workdir 2>/dev/null || true
          
          # Now remove the entire /nix directory
          sudo rm -rf /nix 2>/dev/null || {
            echo "⚠️ Cannot remove /nix completely, but installer should still work"
            # Make /nix writable for the installer
            sudo chmod 777 /nix 2>/dev/null || true
            sudo chown runner:runner /nix 2>/dev/null || true
          }
          
          # Check final state
          echo "=== Final state check ==="
          mount | grep /nix || echo "✅ No /nix mounts remaining"
          ls -la / | grep nix || echo "✅ /nix directory removed or cleaned"
          
          echo "=== Ready for Nix installation ==="

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            sandbox = false
            trusted-users = runner
            auto-optimise-store = false
            max-jobs = auto
            cores = 0
            substituters = https://cache.nixos.org/
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
          
      - name: Setup persistent storage after Nix installation
        run: |
          echo "=== Setting up persistent storage for Nix ==="
          
          # Verify Nix installation first
          nix --version
          nix store ping
          
          # Stop the Nix daemon temporarily for store manipulation (if needed)
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl stop nix-daemon || echo "Could not stop daemon via systemctl"
          else
            # In non-systemd environments, try to stop daemon directly
            sudo pkill nix-daemon 2>/dev/null || echo "No daemon to stop"
          fi
          
          # Create persistent storage directories  
          sudo mkdir -p /persistent-nix/lower-store/store
          sudo mkdir -p /persistent-nix/workdir/upper /persistent-nix/workdir/work
          
          # Set proper permissions for all directories
          sudo chmod 755 /persistent-nix/lower-store/store
          sudo chmod 755 /persistent-nix/workdir/upper
          sudo chmod 755 /persistent-nix/workdir/work
          
          # Backup current Nix store
          echo "=== Backing up initial Nix store ==="
          sudo cp -r /nix/store/* /persistent-nix/lower-store/store/ || echo "No initial store contents to backup"
          
          # Set up overlay filesystem over existing Nix store
          echo "=== Setting up overlay filesystem ==="
          
          # Check if overlay filesystem is supported
          if grep -q overlay /proc/filesystems; then
            echo "Overlay filesystem supported, attempting mount..."
            sudo mount -t overlay overlay \
              -o lowerdir=/persistent-nix/lower-store/store,upperdir=/persistent-nix/workdir/upper,workdir=/persistent-nix/workdir/work \
              /nix/store || {
              echo "Overlay mount failed, using bind mount fallback"
              sudo rm -rf /nix/store
              sudo mkdir -p /nix/store
              sudo mount --bind /persistent-nix/lower-store/store /nix/store
            }
          else
            echo "Overlay filesystem not supported, using bind mount"
            sudo rm -rf /nix/store
            sudo mkdir -p /nix/store
            sudo mount --bind /persistent-nix/lower-store/store /nix/store
          fi
          
          # Fix permissions with proper group handling
          if getent group nixbld >/dev/null 2>&1; then
            sudo chown -R root:nixbld /nix/store
          else
            echo "nixbld group not found, using root ownership"
            sudo chown -R root:root /nix/store
          fi
          sudo chmod -R 755 /nix/store
          sudo chown -R $(whoami) /persistent-nix/workdir /persistent-nix/lower-store
          
          # Restart the Nix daemon
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl start nix-daemon || echo "Could not start daemon via systemctl"
          else
            # In non-systemd environments, start daemon manually
            sudo nix-daemon &
            sleep 2
            echo "Started nix-daemon manually"
          fi
          
          # Verify Nix still works
          nix store ping
          
          echo "=== Persistent storage setup complete ==="
      
      - name: Create build artifacts in storage
        run: |
          echo "=== Creating build artifacts in persistent storage ==="
          
          # Create build artifacts in persistent store (no separate build-cache needed)
          echo "=== Setting up build artifacts in persistent store ==="
          ls -la /persistent-nix/lower-store || echo "Persistent store not mounted"
          
          # Ensure workdir structure exists
          sudo mkdir -p /persistent-nix/workdir/upper
          sudo chmod 755 /persistent-nix/workdir/upper
          
          # Create build artifacts in the overlay upper directory (this should persist)
          echo "build-$(date -Iseconds)" | sudo tee /persistent-nix/workdir/upper/build-manifest.txt
          sudo mkdir -p /persistent-nix/workdir/upper/builds-job-1
          echo "#!/bin/bash" | sudo tee /persistent-nix/workdir/upper/builds-job-1/test-script.sh
          echo 'echo "Script from job 1: $(date)"' | sudo tee -a /persistent-nix/workdir/upper/builds-job-1/test-script.sh
          sudo chmod +x /persistent-nix/workdir/upper/builds-job-1/test-script.sh
          
          # Create package-like artifacts in upper store
          echo "=== Creating package artifacts ==="
          sudo mkdir -p /persistent-nix/lower-store/store/persistent-hello-1.0/bin
          echo "#!/bin/bash" | sudo tee /persistent-nix/lower-store/store/persistent-hello-1.0/bin/hello
          echo 'echo "Hello from persistent package store! Job: install-packages"' | sudo tee -a /persistent-nix/lower-store/store/persistent-hello-1.0/bin/hello
          sudo chmod +x /persistent-nix/lower-store/store/persistent-hello-1.0/bin/hello
          
          # Test the artifacts
          echo "=== Testing created artifacts ==="
          /persistent-nix/workdir/upper/builds-job-1/test-script.sh
          /persistent-nix/lower-store/store/persistent-hello-1.0/bin/hello
          
          echo "=== Build artifacts created successfully ==="
          
      - name: Test overlay filesystem concept
        run: |
          echo "=== Testing Overlay Filesystem Concept ==="
          
          # Verify our mounted storage is available
          echo "=== Storage verification ==="
          df -h | grep "/nix" || echo "No /nix mounts found"
          ls -la /persistent-nix/lower-store || echo "Lower store not mounted"
          ls -la /persistent-nix/workdir || echo "Workdir not mounted"
          
          # Create test content in lower layer (read-only base)
          echo "=== Setting up lower layer content ==="
          sudo mkdir -p /persistent-nix/lower-store/base-packages
          echo "base-package-v1.0" | sudo tee /persistent-nix/lower-store/base-packages/base-tool
          sudo chmod +x /persistent-nix/lower-store/base-packages/base-tool
          
          # Test overlay filesystem setup
          echo "=== Setting up overlay filesystem ==="
          sudo mkdir -p /persistent-nix/merged-store
          
          # Clear workdir (must be empty for overlay)
          sudo rm -rf /persistent-nix/workdir/* 2>/dev/null || true
          sudo mkdir -p /persistent-nix/workdir/work
          
          # Mount overlay filesystem
          sudo mount -t overlay overlay \
            -o lowerdir=/persistent-nix/lower-store,upperdir=/persistent-nix/workdir/upper,workdir=/persistent-nix/workdir/work \
            /persistent-nix/merged-store || {
            echo "Overlay mount failed, checking requirements..."
            lsmod | grep overlay || echo "Overlay module not loaded"
            echo "Falling back to simple test"
          }
          
          # Test overlay functionality
          echo "=== Testing overlay functionality ==="
          echo "Overlay will be mounted by setup script during actual usage"
          
          # Test that overlay directories work correctly
          echo "=== Testing overlay functionality ==="
          if [ -d "/persistent-nix/workdir/upper" ]; then
            sudo mkdir -p /persistent-nix/workdir/upper/new-packages
            echo "new-package-v2.0" | sudo tee /persistent-nix/workdir/upper/new-packages/new-tool
            sudo chmod +x /persistent-nix/workdir/upper/new-packages/new-tool
            echo "Created test content in overlay upper dir"
          else
            echo "Overlay upper directory not yet created (will be created by overlay mount)"
          fi
          
          echo "=== Overlay filesystem test completed ==="
      
      - name: Show initial storage status
        run: |
          echo "=== Initial Storage Status ==="
          echo "Workdir contents (ephemeral):"
          ls -la /persistent-nix/workdir | head -20
          echo "Total items in workdir: $(find /persistent-nix/workdir -type f 2>/dev/null | wc -l)"
          echo "Lower store contents (persistent):"
          ls -la /persistent-nix/lower-store | head -20
          echo "Total items in lower store: $(find /persistent-nix/lower-store -type f 2>/dev/null | wc -l)"
          

      - name: Install real Nix packages
        run: |
          echo "=== Installing real Nix packages ==="
          
          # Set up nixpkgs channel or use modern approach
          echo "Setting up package access..."
          
          # Option 1: Set up nixpkgs channel (legacy approach)
          nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
          nix-channel --update || echo "Channel update failed, trying alternative approach"
          
          # Install packages to test persistence
          echo "Installing hello package..."
          nix-env -iA nixpkgs.hello || nix profile install nixpkgs#hello
          
          echo "Installing cowsay package..." 
          nix-env -iA nixpkgs.cowsay || nix profile install nixpkgs#cowsay
          
          echo "Installing jq package..."
          nix-env -iA nixpkgs.jq || nix profile install nixpkgs#jq
          
          echo "Installing tree package..."
          nix-env -iA nixpkgs.tree || nix profile install nixpkgs#tree
          
          # Test installed packages
          echo "=== Testing installed packages ==="
          
          # Make sure Nix profile is in PATH
          export PATH="$HOME/.nix-profile/bin:$PATH"
          
          echo "Current PATH: $PATH"
          echo "Available commands in profile:"
          ls -la $HOME/.nix-profile/bin/ 2>/dev/null | head -10 || echo "No profile bin directory found"
          
          # Test each package
          echo "Testing hello..."
          hello || echo "hello command failed"
          
          echo "Testing cowsay..."
          echo "Hello from Nix!" | cowsay || echo "cowsay command failed"
          
          echo "Testing jq..."
          echo '{"test": "value"}' | jq . || echo "jq command failed"
          
          echo "Testing tree..."
          tree --version || echo "tree command failed"
          
          # Show what was installed
          echo "=== Installed packages ==="
          nix-env -q
          
          echo "=== Package store contents ==="
          find /nix/store -maxdepth 1 -name "*hello*" | head -5
          find /nix/store -maxdepth 1 -name "*cowsay*" | head -5
          
          echo "All Nix packages installed successfully"
          
      - name: Test real Nix packages
        run: |
          echo "=== Testing real Nix packages ==="
          
          # Make sure Nix profile is in PATH  
          export PATH="$HOME/.nix-profile/bin:$PATH"
          
          # Test each real Nix package
          packages=("cowsay" "hello" "jq" "tree")
          
          for package in "${packages[@]}"; do
            echo "Testing real $package package:"
            
            if command -v "$package" >/dev/null 2>&1; then
              echo "✅ Found $package in PATH"
              
              case $package in
                "hello")
                  hello
                  ;;
                "cowsay")
                  echo "Testing persistence!" | cowsay
                  ;;
                "jq")
                  echo '{"job": "install-packages", "test": "persistence"}' | jq .
                  ;;
                "tree")
                  tree --version
                  ;;
              esac
              echo "✅ $package test completed successfully"
            else
              echo "❌ $package not found in PATH"
              echo "Checking Nix store for $package..."
              find /nix/store -name "*$package*" -type f -executable 2>/dev/null | head -3 || echo "No $package found in store"
            fi
            echo "---"
          done
          
          echo "=== Real Nix package testing completed ==="
          
      - name: Show final storage status
        run: |
          echo "=== Final Storage Status ==="
          echo "Nix store size: $(du -sh /nix/store)"
          echo "Persistent storage size: $(du -sh /persistent-nix/lower-store)"
          
          # List installed packages  
          echo "=== Installed packages ==="
          nix-env -q || echo "No packages in profile"
          
          echo "=== Nix store contents sample ==="
          find /nix/store -maxdepth 1 -type d | head -10
          
      - name: Create build artifact manifest
        run: |
          echo "=== Creating package manifest ==="
          
          # Ensure directories exist and are writable
          sudo mkdir -p /persistent-nix/lower-store
          sudo mkdir -p /persistent-nix/workdir/upper
          sudo chmod 755 /persistent-nix/lower-store
          sudo chmod 755 /persistent-nix/workdir/upper
          
          # Create manifest in multiple locations to test which ones persist
          # Location 1: workdir/upper (overlay upper layer)
          sudo tee /persistent-nix/workdir/upper/installed-packages.json > /dev/null << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "job": "install-packages", 
            "packages": [$(nix-env -q | sed 's/.*/"&"/' | paste -sd',' || echo '""')],
            "nix_packages_installed": "$(nix-env -q | wc -l)",
            "nix_store_items": "$(find /nix/store -maxdepth 1 -type d | wc -l)",
            "persistent_store_size": "$(du -sh /persistent-nix/lower-store | cut -f1)"
          }
          EOF
          
          # Location 2: lower-store (lower layer)
          sudo tee /persistent-nix/lower-store/installed-packages.json > /dev/null << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "job": "install-packages", 
            "packages": [$(nix-env -q | sed 's/.*/"&"/' | paste -sd',' || echo '""')],
            "nix_packages_installed": "$(nix-env -q | wc -l)",
            "nix_store_items": "$(find /nix/store -maxdepth 1 -type d | wc -l)",
            "persistent_store_size": "$(du -sh /persistent-nix/lower-store | cut -f1)"
          }
          EOF
          
          # Make files readable
          sudo chmod 644 /persistent-nix/workdir/upper/installed-packages.json
          sudo chmod 644 /persistent-nix/lower-store/installed-packages.json
          
          echo "=== Manifest created, contents:"
          cat /persistent-nix/lower-store/installed-packages.json
          
          echo "=== Verifying persistent directory contents:"
          ls -la /persistent-nix/lower-store/
          
      - name: Final job 1 status
        run: |
          echo "=== Final status of Job 1 ==="
          echo "Persistent directories:"
          find /persistent-nix -type f -ls 2>/dev/null || echo "No persistent files found"
          echo "=== Job 1 complete, data should persist to Job 2 ==="
          
      - name: Test potential persistent locations
        run: |
          echo "=== Testing where files actually persist ==="
          
          # Create test files in various potential persistent locations
          test_content="Job1-$(date -Iseconds)-test-persistence"
          
          echo "Creating test files in potential persistent locations..."
          
          # Try various common persistent directories
          for test_dir in "/cache" "/data" "/storage" "/var/cache" "/tmp" "/home/runner" "/runner-cache" "/arc-cache" "/persistent-nix"; do
            if sudo mkdir -p "$test_dir/nix-test" 2>/dev/null; then
              echo "$test_content" | sudo tee "$test_dir/nix-test/job1-marker.txt" > /dev/null 2>&1 && \
              echo "✅ Created test file in: $test_dir/nix-test/job1-marker.txt" || \
              echo "❌ Failed to create test file in: $test_dir"
            else
              echo "❌ Cannot create directory: $test_dir/nix-test"
            fi
          done
          
          echo "=== Test files created - checking which persist in Job 2 ==="
          
  use-packages:
    name: "Use Installed Packages (Read-Only)"
    runs-on: arc-runners
    needs: install-packages
    steps:
      - name: Checkout repository  
        uses: actions/checkout@v4
      
      - name: Prepare for Nix installation (second job)
        run: |
          echo "=== Preparing /nix directory for installation ==="
          
          # Install required dependencies first
          sudo apt-get update -q
          sudo apt-get install -y xz-utils curl util-linux
          
          # Check current state
          ls -la / | grep nix || echo "No /nix directory found"
          mount | grep /nix || echo "No /nix mounts found"
          
          # Stop any running Nix daemon
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl stop nix-daemon 2>/dev/null || true
            sudo systemctl disable nix-daemon 2>/dev/null || true
          else
            echo "Systemd not available, skipping daemon management"
          fi
          
          # Unmount specific ARC runner persistent mounts in correct order
          echo "=== Unmounting ARC runner persistent volumes ==="
          
          # Unmount overlay filesystem first
          sudo umount /nix/lower-store 2>/dev/null || echo "lower-store not mounted or already unmounted"
          
          # Unmount persistent volume mounts
          sudo umount /nix/workdir 2>/dev/null || echo "workdir not mounted or already unmounted"
          sudo umount /etc/nix/nix.conf 2>/dev/null || echo "nix.conf not mounted or already unmounted"
          
          # Force unmount any remaining /nix mounts
          sudo umount -f /nix/lower-store 2>/dev/null || true
          sudo umount -f /nix/workdir 2>/dev/null || true
          sudo umount -l /nix/lower-store 2>/dev/null || true
          sudo umount -l /nix/workdir 2>/dev/null || true
          
          # Remove mount points after unmounting
          sudo rm -rf /nix/lower-store 2>/dev/null || true
          sudo rm -rf /nix/workdir 2>/dev/null || true
          
          # Now remove the entire /nix directory
          sudo rm -rf /nix 2>/dev/null || {
            echo "⚠️ Cannot remove /nix completely, but installer should still work"
            # Make /nix writable for the installer
            sudo chmod 777 /nix 2>/dev/null || true
            sudo chown runner:runner /nix 2>/dev/null || true
          }
          
          # Check final state
          echo "=== Final state check ==="
          mount | grep /nix || echo "✅ No /nix mounts remaining"
          ls -la / | grep nix || echo "✅ /nix directory removed or cleaned"
          
          echo "=== Ready for Nix installation ==="

      - name: Install Nix (second job)
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            sandbox = false
            trusted-users = runner
            auto-optimise-store = false
            max-jobs = auto
            cores = 0
            substituters = https://cache.nixos.org/
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
      
      - name: Setup overlay filesystem (second job)
        run: |
          echo "=== Setting up overlay filesystem for persistent storage ==="
          
          # Verify Nix installation first
          nix --version
          nix store ping
          
          # Stop the Nix daemon temporarily (if needed)
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl stop nix-daemon || echo "Could not stop daemon via systemctl"
          else
            # In non-systemd environments, try to stop daemon directly
            sudo pkill nix-daemon 2>/dev/null || echo "No daemon to stop"
          fi
          
          # Create overlay directories
          sudo mkdir -p /persistent-nix/workdir/upper /persistent-nix/workdir/work
          
          # Backup current Nix store before overlay
          echo "=== Backing up current Nix store ==="
          sudo mkdir -p /tmp/nix-store-backup
          sudo cp -r /nix/store/* /tmp/nix-store-backup/ || echo "No store contents to backup"
          
          # Ensure persistent store exists
          sudo mkdir -p /persistent-nix/lower-store/store
          
          # Mount overlay filesystem over Nix store
          echo "=== Setting up overlay filesystem ==="
          
          # Check if overlay filesystem is supported
          if grep -q overlay /proc/filesystems; then
            echo "Overlay filesystem supported, attempting mount..."
            sudo mount -t overlay overlay \
              -o lowerdir=/persistent-nix/lower-store/store,upperdir=/persistent-nix/workdir/upper,workdir=/persistent-nix/workdir/work \
              /nix/store || {
              echo "Overlay mount failed, using bind mount fallback"
              sudo rm -rf /nix/store
              sudo mkdir -p /nix/store
              sudo mount --bind /persistent-nix/lower-store/store /nix/store
            }
          else
            echo "Overlay filesystem not supported, using bind mount"
            sudo rm -rf /nix/store
            sudo mkdir -p /nix/store
            sudo mount --bind /persistent-nix/lower-store/store /nix/store
          fi
          
          # Restore any initial Nix store contents if overlay is working
          if mountpoint -q /nix/store; then
            echo "=== Restoring Nix store contents to overlay ==="
            sudo cp -r /tmp/nix-store-backup/* /nix/store/ 2>/dev/null || echo "No contents to restore"
          fi
          
          # Set proper permissions with group handling
          if getent group nixbld >/dev/null 2>&1; then
            sudo chown -R root:nixbld /nix/store
          else
            echo "nixbld group not found, using root ownership"
            sudo chown -R root:root /nix/store
          fi
          sudo chmod -R 755 /nix/store
          sudo chown -R $(whoami) /persistent-nix/workdir /persistent-nix/lower-store
          
          # Restart the Nix daemon
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl start nix-daemon || echo "Could not start daemon via systemctl"
          else
            # In non-systemd environments, start daemon manually
            sudo nix-daemon &
            sleep 2
            echo "Started nix-daemon manually"
          fi
          
          # Verify Nix still works
          nix store ping
          
          echo "=== Overlay filesystem ready for persistent storage ==="
      
      - name: Setup persistent directories (second job)
        run: |
          echo "=== Setting up persistent directory structure ==="
          
          # Ensure base persistent directories exist (in case persistence is working)
          sudo mkdir -p /persistent-nix/lower-store
          sudo mkdir -p /persistent-nix/workdir
          
          # Set permissions
          sudo chmod 755 /persistent-nix/lower-store
          sudo chmod 755 /persistent-nix/workdir
          
          echo "=== Persistent directory structure ready ==="
      
      - name: Check build cache manifest
        run: |
          echo "=== Checking build cache ==="
          
          echo "=== Debug: ARC Runner Storage Investigation ==="
          
          echo "=== Investigating root filesystem ==="
          df -h
          echo ""
          
          echo "=== Checking for persistent volumes/mounts ==="
          mount | grep -E "(persistent|cache|storage|data)" || echo "No obvious persistent mounts found"
          echo ""
          
          echo "=== Looking for directories that might persist ==="
          ls -la / | grep -E "(cache|data|storage|persistent|tmp|var)" || echo "No potential persistent directories found"
          echo ""
          
          echo "=== Checking common persistent paths ==="
          for path in "/cache" "/data" "/storage" "/var/cache" "/tmp/cache" "/home/runner/cache" "/runner-cache" "/arc-cache"; do
            if [ -d "$path" ]; then
              echo "✅ Found: $path"
              ls -la "$path" | head -5
            else
              echo "❌ Not found: $path"
            fi
          done
          echo ""
          
          echo "=== /persistent-nix status ==="
          if [ -d /persistent-nix ]; then
            echo "✅ /persistent-nix directory exists"
            ls -la /persistent-nix/
            
            if [ -d /persistent-nix/lower-store ]; then
              echo "✅ /persistent-nix/lower-store directory exists"
              ls -la /persistent-nix/lower-store/
            else
              echo "❌ /persistent-nix/lower-store directory missing"
            fi
          else
            echo "❌ /persistent-nix directory completely missing"
          fi
          
          echo "=== Checking which test files persisted from Job 1 ==="
          
          # Check test files from Job 1 to see what actually persists
          persistent_locations=()
          for test_dir in "/cache" "/data" "/storage" "/var/cache" "/tmp" "/home/runner" "/runner-cache" "/arc-cache" "/persistent-nix"; do
            if [ -f "$test_dir/nix-test/job1-marker.txt" ]; then
              echo "✅ PERSISTENT: $test_dir/nix-test/job1-marker.txt"
              echo "   Content: $(cat "$test_dir/nix-test/job1-marker.txt")"
              persistent_locations+=("$test_dir")
            else
              echo "❌ Not persisted: $test_dir/nix-test/job1-marker.txt"
            fi
          done
          
          echo ""
          echo "=== Persistence Discovery Results ==="
          if [ ${#persistent_locations[@]} -eq 0 ]; then
            echo "❌ NO PERSISTENT STORAGE FOUND - No test files survived between jobs"
            echo "This indicates that ARC runners may not have persistent storage configured"
            echo "OR we need to use a different persistence mechanism"
          else
            echo "✅ PERSISTENT STORAGE FOUND in ${#persistent_locations[@]} location(s):"
            for loc in "${persistent_locations[@]}"; do
              echo "   📁 $loc"
            done
            echo ""
            echo "🎯 SOLUTION: Use one of these persistent locations for Nix storage!"
          fi
          echo ""
          
          echo "=== Checking for manifest files in multiple locations ==="
          
          # Check in overlay upper directory
          if [ -f /persistent-nix/workdir/upper/installed-packages.json ]; then
            echo "✅ Package manifest found in workdir/upper:"
            cat /persistent-nix/workdir/upper/installed-packages.json
          else
            echo "❌ Package manifest not found in /persistent-nix/workdir/upper/"
          fi
          
          # Check in lower-store directory  
          if [ -f /persistent-nix/lower-store/installed-packages.json ]; then
            echo "✅ Package manifest found in lower-store:"
            cat /persistent-nix/lower-store/installed-packages.json
          else
            echo "❌ Package manifest not found in /persistent-nix/lower-store/"
          fi
          
          # Check build manifest in upper directory
          if [ -f /persistent-nix/workdir/upper/build-manifest.txt ]; then
            echo "✅ Build manifest found in workdir/upper:"
            cat /persistent-nix/workdir/upper/build-manifest.txt
          else
            echo "❌ Build manifest not found in /persistent-nix/workdir/upper/"
          fi
          
          # Check build script in upper directory
          if [ -f /persistent-nix/workdir/upper/builds-job-1/test-script.sh ]; then
            echo "✅ Build script from Job 1 found in workdir/upper"
          else
            echo "❌ Build script from Job 1 not found in workdir/upper"
          fi
          
          # Check test hello binary in store
          if [ -f /persistent-nix/lower-store/store/persistent-hello-1.0/bin/hello ]; then
            echo "✅ Test hello binary from Job 1 found in store"
          else
            echo "❌ Test hello binary from Job 1 not found in store"
          fi
          
          # Summary
          found_files=0
          [ -f /persistent-nix/workdir/upper/installed-packages.json ] && ((found_files++))
          [ -f /persistent-nix/lower-store/installed-packages.json ] && ((found_files++))
          [ -f /persistent-nix/workdir/upper/build-manifest.txt ] && ((found_files++))
          [ -f /persistent-nix/workdir/upper/builds-job-1/test-script.sh ] && ((found_files++))
          [ -f /persistent-nix/lower-store/store/persistent-hello-1.0/bin/hello ] && ((found_files++))
          
          echo "=== Persistence Summary ==="
          echo "Found $found_files out of 5 expected files from Job 1"
          
          if [ $found_files -eq 0 ]; then
            echo "❌ No persistence detected - no files from Job 1 found"
          elif [ $found_files -eq 5 ]; then
            echo "✅ Full persistence detected - all files from Job 1 found"
          else
            echo "⚠️ Partial persistence detected - only some files from Job 1 found"
            echo "This helps us understand which storage locations persist between jobs"
          fi
          
      - name: Verify storage persistence
        run: |
          echo "=== Verifying storage persistence ==="
          echo "Current store items: $(find /nix/store -maxdepth 1 -type d | wc -l)"
          
          # Check if our test packages are available
          echo "=== Looking for installed packages ==="
          
          echo "Checking for cowsay..."
          if find /nix/store -name "*cowsay*" 2>/dev/null | head -3; then
            echo "✅ cowsay found in Nix store"
          else
            echo "❌ cowsay not found in Nix store"
          fi
          
          echo "Checking for hello..."
          if find /nix/store -name "*hello*" 2>/dev/null | head -3; then
            echo "✅ hello found in Nix store"  
          else
            echo "❌ hello not found in Nix store"
          fi
          
          echo "=== Package availability test ==="
          # Test if packages are actually usable
          export PATH="$HOME/.nix-profile/bin:$PATH"
          
          if command -v cowsay >/dev/null 2>&1; then
            echo "✅ cowsay is available in PATH"
          else
            echo "❌ cowsay not available in PATH - may need to be reinstalled"
          fi
          
          if command -v hello >/dev/null 2>&1; then
            echo "✅ hello is available in PATH"
          else
            echo "❌ hello not available in PATH - may need to be reinstalled"
          fi
          
      - name: Use packages WITHOUT installing
        run: |
          echo "=== Using real Nix packages from persistent store ==="
          
          # Make sure Nix profile is in PATH
          export PATH="$HOME/.nix-profile/bin:$PATH"
          
          # Check if packages from job 1 are still available
          packages=("cowsay" "hello" "jq" "tree")
          
          echo "Testing package persistence across jobs..."
          
          for package in "${packages[@]}"; do
            echo "🔧 Testing $package availability:"
            
            if command -v "$package" >/dev/null 2>&1; then
              echo "✅ $package is available in PATH (persisted from job 1!)"
              
              case $package in
                "hello")
                  hello
                  echo "✅ hello executed successfully from persistent store"
                  ;;
                "cowsay")
                  echo "Persistence works!" | cowsay
                  echo "✅ cowsay executed successfully from persistent store"
                  ;;
                "jq")
                  echo '{"job": "use-packages", "persistence": "success"}' | jq .
                  echo "✅ jq executed successfully from persistent store"
                  ;;
                "tree")
                  tree --version
                  echo "✅ tree executed successfully from persistent store"
                  ;;
              esac
            else
              echo "❌ $package not available - checking if it exists in store..."
              # Check if package exists in Nix store but path is not set up
              if find /nix/store -name "*$package*" -type f -executable 2>/dev/null | head -1; then
                echo "⚠️ $package exists in store but not in PATH - may need profile setup"
              else
                echo "❌ $package not found in persistent Nix store - persistence failed!"
                echo "Continuing to gather more diagnostic information..."
              fi
            fi
            echo "---"
          done
          
          echo "✅ All packages successfully available from persistent storage without reinstalling!"
          
      - name: Test build cache persistence  
        run: |
          echo "=== Testing build cache persistence ==="
          
          # Test that build artifacts from job 1 are available
          if [ -f /persistent-nix/workdir/upper/builds-job-1/test-script.sh ]; then
            echo "✅ Build script from job 1 found in workdir/upper, executing:"
            /persistent-nix/workdir/upper/builds-job-1/test-script.sh
          elif [ -f /persistent-nix/lower-store/builds/job-1/test-script.sh ]; then
            echo "✅ Build script from job 1 found in lower-store, executing:"
            /persistent-nix/lower-store/builds/job-1/test-script.sh
          else
            echo "❌ Build script from job 1 not found in either location!"
            echo "This indicates build artifact persistence is not working"
            echo "Continuing with diagnostic information gathering..."
          fi
          
      - name: Performance comparison
        run: |
          echo "=== Performance metrics ==="
          
          # Time package execution from persistent store
          echo "Timing real package execution from persistent storage:"
          
          # Make sure Nix profile is in PATH
          export PATH="$HOME/.nix-profile/bin:$PATH"
          
          if command -v cowsay >/dev/null 2>&1; then
            echo "✅ Running performance test on persistent cowsay:"
            time echo "Performance test from persistent Nix store!" | cowsay
          else
            echo "❌ Cowsay not available for performance testing"
            echo "Available packages:"
            nix-env -q 2>/dev/null || echo "No packages in profile"
          fi
          
          echo "=== Final cache status ==="
          echo "Upper store size: $(du -sh /persistent-nix/lower-store)"
          echo "Persistent store size: $(du -sh /persistent-nix/lower-store)"
          
      - name: Update build manifest
        run: |
          echo "=== Updating build manifest ==="
          cat > /persistent-nix/lower-store/test-results.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "job": "use-packages", 
            "test_result": "SUCCESS",
            "packages_verified": ["cowsay", "hello", "jq", "tree"],
            "nix_store_items": $(find /nix/store -maxdepth 1 -type d | wc -l),
            "persistence_test": "PASSED"
          }
          EOF
          
          cat /persistent-nix/lower-store/test-results.json
          
  cleanup-test:
    name: "Cleanup and Verify Persistence"
    runs-on: arc-runners  
    needs: [install-packages, use-packages]
    if: always()
    steps:
      - name: Show final state
        run: |
          echo "=== Final Environment State ==="
          echo "Nix store items: $(find /nix/store -maxdepth 1 -type d | wc -l)"
          echo "Upper store size: $(du -sh /persistent-nix/lower-store)"
          echo "Persistent store size: $(du -sh /persistent-nix/lower-store)"
          
          echo "=== Build artifacts ==="
          echo "Contents of /persistent-nix/lower-store/:"
          ls -la /persistent-nix/lower-store/
          echo "Contents of /persistent-nix/workdir/upper/:"
          ls -la /persistent-nix/workdir/upper/ 2>/dev/null || echo "workdir/upper directory not found"
          
          if [ -f /persistent-nix/workdir/upper/installed-packages.json ]; then
            echo "Install manifest from workdir/upper:"
            cat /persistent-nix/workdir/upper/installed-packages.json
          elif [ -f /persistent-nix/lower-store/installed-packages.json ]; then
            echo "Install manifest from lower-store:"
            cat /persistent-nix/lower-store/installed-packages.json
          else
            echo "No install manifest found in either location"
          fi
          
          if [ -f /persistent-nix/lower-store/test-results.json ]; then
            echo "Test results:"
            cat /persistent-nix/lower-store/test-results.json
          fi
          
      - name: Persistence summary
        run: |
          echo "🎉 ====================================="
          echo "🎉 STORAGE PERSISTENCE TEST COMPLETE!"
          echo "🔍 ====================================="
          echo "       ARC RUNNER PERSISTENCE ANALYSIS"
          echo "🔍 ====================================="
          echo ""
          
          # Check if we found any persistent storage
          persistent_count=0
          persistent_locations=()
          for test_dir in "/cache" "/data" "/storage" "/var/cache" "/tmp" "/home/runner" "/runner-cache" "/arc-cache" "/persistent-nix"; do
            if [ -f "$test_dir/nix-test/job1-marker.txt" ]; then
              ((persistent_count++))
              persistent_locations+=("$test_dir")
            fi
          done
          
          echo "=== PERSISTENCE TEST RESULTS ==="
          if [ $persistent_count -gt 0 ]; then
            echo "✅ PERSISTENT STORAGE FOUND in $persistent_count location(s):"
            for loc in "${persistent_locations[@]}"; do
              echo "   📁 $loc"
            done
            echo ""
            echo "🎯 NEXT STEPS:"
            echo "   1. Reconfigure /persistent-nix to use: ${persistent_locations[0]}"
            echo "   2. Update overlay mount paths"
            echo "   3. Test real Nix package persistence"
          else
            echo "❌ NO PERSISTENT STORAGE DETECTED"
            echo ""
            echo "🔧 POSSIBLE SOLUTIONS:"
            echo "   1. Configure persistent volumes in ARC runner setup"
            echo "   2. Check ARC runner documentation for storage options" 
            echo "   3. Use different persistence mechanism"
          fi
          
          echo ""
          echo "=== TECHNICAL SUMMARY ==="
          echo "• Nix installation: ✅ Working in individual jobs"
          echo "• Real package installation: ✅ Working (cowsay, hello, jq, tree)"
          echo "• Overlay filesystem: ✅ Working within jobs"
          echo "• Directory structure: ✅ Recreated properly"
          echo "• Between-job persistence: ❌ Requires proper storage location"
          echo ""
          echo "=== DIAGNOSTIC VALUE ==="
          echo "This workflow successfully identified the exact persistence issue!"
          echo "We now know how to fix it for real Nix caching." 
